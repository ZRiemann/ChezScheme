#!/usr/bin/scheme --script

;; 打印脚本参数
(for-each
 (lambda (x) (display x) (newline))
 (cdr (command-line)))

;; implements the triditional Unix echo command
;; 实现传统的 Unix echo 命令
(let ([args (cdr (command-line))])
  (unless (null? args)
          (let-values ([(newline? args)
                        (if (equal? (car args) "-n")
                            (values #f (cdr args))
                            (values #t args))])
            (do ([args args (cdr args)] [sep "" " "])
                ((null? args))
              (printf "~a~a" sep (car args)))
            (when newline? (newline)))))

(display "2.1.4 常量表达式")(newline)
(display "      原则：常量的值是常量自身")(newline)
(display "      字符串: 直接用双引号包含")(newline)
(display "\"this is string constant\"")(newline)
(display "      数值: 本身")(newline)
(display 3.2415926)(newline)
(display '(a b c d))(newline)

(display "5. define a procedure(过程定义)")(newline)
(display "   sample: (define square (lambda (n)(* n n)))")(newline)
(define square
  (lambda (n)
    (* n n)))
(display "   call: (square 3) => 9")(newline)
(display (square 3))(newline)
(display "倒数:
(define reciprocal
  (lambda (n)
     (if (= n 0)
         \"oops!\"
         (/ 1 n))))")(newline)
(define reciprocal
  (lambda (n)
    (if (= n 0)
        "oops!"
        (/ 1 n))))
(display "call: (reciprocal 3)")(newline)
(display (reciprocal 3))(newline)
(display "call: (reciprocal 0)")(newline)
(display (reciprocal 0))(newline)

(display "5.2 简单表达式")(newline)
(display "5.2.1 数值: 精确整数(任意精度)/不精确整数/有理数/实数/复数*")(newline)
(display "5.2.2 算术过程: +,-,*,/")(newline)
(display "5.2.3 前序标记法: 无优先级\\简化连续参数")(newline)
(display "5.2.4 嵌套")(newline)
(display "      (/ (* 6/7 7/2) (- 4.5 1.5)) => 1.0")(newline)
(display "5.2.5 聚合数据 aggregate data structures ")(newline)
(display "5.2.6 列表 '(1 2 3) (quote (1 2 3))")(newline)
(display "5.2.7 '(1 2 3) (quote (1 2 3))")(newline)
(display "5.2.8 符号与变量 symbol and variable")(newline)
(display "      (quote hello) 视hello为符号不是辩论")(newline)
(display "5.2.9 程序与数据同质")(newline)
(display "5.2.10 常量引用即自身 '1 => 1 (quote \"hello\") => \"hello\"")(newline)
(display "5.2.11 列表操作")(newline)
(display "       '(a b c)")(newline)
(display "       (car '(a b c)) => a")(newline)
(display "       (cdr '(a b c)) => (b c)")(newline)
(display "       improper/dotted list(点列表)")(newline)
(display "       (a . b) [a.b]")(newline)
(display "       proper list(常规列表)")(newline)
(display "       (a b) [a.-]->[b.0]")(newline)
(display "5.2.3 表达式求值 Evaluation Expressions")(newline)
(display "      核心句法 常量、过程、引用")(newline)
(display "      扩展句法 let,lambda")(newline)
(display "      顺序：从左到右")(newline)
(display "5.2.4 let 局部变量,及变量覆盖")(newline)
(display "      (let ([x 1] [y 2]) (+ x y)) => 3")(newline)
(display (let ([x 1] [y 2]) (+ x y)))(newline)
(display "      (let ([x 1]) => 3")(newline)
(display "      ([x 1])(let ([x (+ x 1)]) (+ x x))) => 4")(newline)
(display (let ([x 1])(let ([x (+ x 1)]) (+ x x))))(newline)
(display "5.2.5 lambda (let 由 lambda 扩展)")(newline)
(display "(let ([x 'a])
  (let ([f (lambda (y) (list x y))])
    (f 'b)))")(newline)
(display "=> ")
(display (let ([x 'a])
           (let ([f (lambda (y) (list x y))])
             (f 'b))))(newline)
(display "5.2.4 let 局部变量")(newline)